package edu.wsu.dase.controller;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Set;
import java.util.SortedMap;

import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.dataflow.qual.SideEffectFree;
import org.protege.editor.owl.ui.prefix.PrefixUtilities;
import org.semanticweb.owlapi.model.OWLAnnotation;
import org.semanticweb.owlapi.model.OWLAnnotationProperty;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.PrefixManager;
import org.semanticweb.owlapi.util.DefaultPrefixManager;

import edu.wsu.dase.model.Constants;
import edu.wsu.dase.model.RuleModel;

public class Engine {

	private OWLOntology activeOntology;
	private boolean ontologyChanged;
	private LinkedHashMap<String, Set<OWLAxiom>> axiomsWithID;
	private LinkedHashMap<String, RuleModel> rulesWithID;
	private PrefixManager prefixManager;
	private OWLAnnotationProperty fixedAnnotationProperty;

	public Engine(OWLOntology activeOntology) {
		this.activeOntology = activeOntology;
		this.prefixManager = PrefixUtilities.getPrefixOWLOntologyFormat(activeOntology);
		fixedAnnotationProperty = activeOntology.getOWLOntologyManager().getOWLDataFactory()
				.getOWLAnnotationProperty(Constants.FIXED_ANNOTATION_NAME, prefixManager);

		initializeDataStructure();

		reloadRulesAndAxiomsFromOntology();

	}

	private void initializeDataStructure() {
		rulesWithID = new LinkedHashMap<String, RuleModel>();
		axiomsWithID = new LinkedHashMap<String, Set<OWLAxiom>>();
	}

	public LinkedHashMap<String, RuleModel> getRules() {

		return this.rulesWithID;
	}

	public RuleModel getRulebyID(String ruleName) {
		if (rulesWithID.containsKey(ruleName)) {
			return rulesWithID.get(ruleName);
		}
		return null;
	}

	public Set<OWLAxiom> getAxiomsbyID(String ruleName) {
		if (axiomsWithID.containsKey(ruleName)) {
			return axiomsWithID.get(ruleName);
		}
		return null;
	}

	public void OntologyChanged() {
		reloadRulesAndAxiomsFromOntology();
	}

	public boolean checkDuplicateRuleName(String RuleName) {
		if (rulesWithID.containsKey(RuleName))
			return true;
		else
			return false;
	}

	public boolean checkDuplicateRuleText(String RuleText) {
		if (rulesWithID.containsValue(RuleText))
			return true;
		else
			return false;
	}

	public String getAutogeneratedNextRuleName() {
		int size = rulesWithID.size() + 1;
		return "R" + size;
	}

	private void reloadRulesAndAxiomsFromOntology() {

		// JPopupMenu
		if (rulesWithID != null)
			rulesWithID.clear();
		if (axiomsWithID != null)
			axiomsWithID.clear();

		Set<OWLAxiom> tmpAxioms = new HashSet<OWLAxiom>();
		String ruleID = "";
		int i = 0;

		/**
		 * when converting rule to owl, single rule can generate multiple
		 * axioms. That means multiple axioms need to be binded for a single
		 * rule-id
		 */
		for (OWLAxiom ax : activeOntology.getAxioms()) {
			for (OWLAnnotation ann : ax.getAnnotations()) {
				for (OWLAnnotationProperty anp : ann.getAnnotationPropertiesInSignature()) {
					if (anp.equals(fixedAnnotationProperty)) {
						// System.out.println(ann.getValue().asLiteral().get().getLiteral());
						String val = ann.getValue().asLiteral().get().getLiteral();
						String[] values = val.split("___", 3);
						System.out.println("splitted length: " + values.length);
						for (String s : values) {
							System.out.println("spiltted: " + s);
						}
						if (values.length == 3) {
							String ruleid = values[0];
							String ruleText = values[1];
							String ruleComment = values[2];
							if (ruleid.length() > 0 && ruleText.length() > 0) {
								
								System.out.println("rulesWithID length before: " + rulesWithID.size());
								// add to rulewith ID
								rulesWithID.put(ruleid, new RuleModel(ruleid, ruleText, ruleComment));
								System.out.println("rulesWithID length after: " + rulesWithID.size());
								
								// add to axioms with ID
								if (i == 0) { // initial case
									tmpAxioms.add(ax);
									ruleID = values[0];
									i++;
								} else { // latter case
									if (ruleID == values[0]) { // this rule-id
																// has this
																// axiom and may
																// contain more
																// axiom
										tmpAxioms.add(ax);
									} else { // now this rule-id is saturated
												// and tmpAxioms is filled with
												// all Axioms binded to this
												// rule-id
										axiomsWithID.put(values[0], tmpAxioms);

										tmpAxioms.clear();
										tmpAxioms.add(ax);
										ruleID = values[0];
									}
								}
							}
						} else {
							System.out.println("Annotation doesn't have 3 parts");
						}
					}
				}
			}
		}
	}

}
